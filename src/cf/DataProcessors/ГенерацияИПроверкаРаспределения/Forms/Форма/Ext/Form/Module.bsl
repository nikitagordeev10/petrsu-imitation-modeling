//Алгоритм "Быстрая сортировка"
Процедура БыстраяСортировка(мДанные,НижняяГраница,ВерхняяГраница)
    i = НижняяГраница;
    j = ВерхняяГраница;
    m = мДанные[Цел((i+j)/2)];
	
	Пока Истина Цикл    
        Пока мДанные[i] < m Цикл        
            i = i + 1;        
        КонецЦикла;
		
		Пока мДанные[j] > m Цикл        
            j = j - 1;        
        КонецЦикла; 
        
        Если i<=j Тогда        
            wsp = мДанные[i];
            мДанные[i] = мДанные[j];
            мДанные[j] = wsp;
            i = i + 1;
            j = j - 1;        
        КонецЕсли;
        
        Если i>j Тогда
            Прервать;
        КонецЕсли; 
        
	КонецЦикла;       
	
    Если НижняяГраница < j Тогда
        БыстраяСортировка(мДанные,НижняяГраница,j);
	КонецЕсли;                   
	
    Если i < ВерхняяГраница Тогда
        БыстраяСортировка(мДанные,i,ВерхняяГраница);
    КонецЕсли;
    
КонецПроцедуры

Процедура СортироватьМассив(Массив)
        НижняяГраница = 0;
        ВерхняяГраница = Массив.ВГраница();
        БыстраяСортировка(Массив,НижняяГраница,ВерхняяГраница);
КонецПроцедуры
	
Функция PI()
    Возврат 3.1415926535897932384626433832795;
КонецФункции

Функция Abs(Аргумент) 
    Возврат ?(Аргумент >= 0, Аргумент, -Аргумент);
КонецФункции

// =====================================================================================================

// Функция для генерации случайного числа из заданного распределения методом Неймана
Функция СгенерироватьСлучайноеЧисло() 
    ГСЧ = Новый ГенераторСлучайныхЧисел();
    Пока Истина Цикл
        x = 2 * PI() * ГСЧ.СлучайноеЧисло(0, 1);
        y = ГСЧ.СлучайноеЧисло(0, 1) * (3.0 / (4 * PI())); // Верхняя граница f(x)
        Если y <= (2 + Cos(x)) / (4 * PI()) Тогда
            Возврат x;
        КонецЕсли;
    КонецЦикла;
КонецФункции

// Функция для вычисления эмпирической функции распределения
Функция ВычислитьЭмпирическуюФР(Выборка, ЭФР) 
	Для i = 0 По Выборка.Количество() - 1 Цикл
        ЭФР[i] = (i + 1) / Выборка.Количество();
    КонецЦикла;
КонецФункции

// Теоретическая функция распределения (CDF) для данного распределения
Функция ТеоретическаяФункцияРаспределения(x)
    Интеграл = 0.0;
    num_steps = 1000;
    dx = x / num_steps;
    Для i = 0 По num_steps - 1 Цикл
        xi = i * dx;
        Интеграл = Интеграл + (2 + Cos(xi)) * dx;
    КонецЦикла;
    Возврат Интеграл / (4 * PI());
КонецФункции

// Критерий Колмогорова-Смирнова
Функция КритерийКолмогороваСмирнова(Выборка)
	СортироватьМассив(Выборка);
    ЭФР = Новый Массив(Выборка.Количество());
    ВычислитьЭмпирическуюФР(Выборка, ЭФР);
    d_max = 0.0;
	
	//Сообщить("Промежуточные значения:");
	//Сообщить("  x		Эмпирическая CDF	Теоретическая CDF	Разница");
     
    Для i = 0 По Выборка.Количество() - 1 Цикл
        cdf_theoretical = ТеоретическаяФункцияРаспределения(Выборка[i]);
        d = Abs(ЭФР[i] - cdf_theoretical);
		//Сообщить(Выборка[i] + "	" + ЭФР[i] + "	" + cdf_theoretical + "	" + d);
        Если d > d_max Тогда
            d_max = d;
        КонецЕсли;
    КонецЦикла;
    Возврат d_max;
КонецФункции

// Функция для оценки значимости статистики Колмогорова-Смирнова
Функция КритическоеЗначение(n)
    Возврат 1.36 / sqrt(n);
КонецФункции

// =====================================================================================================

&НаКлиенте
Процедура СгенерироватьРаспределение(Команда)
    ГСЧ = Новый ГенераторСлучайныхЧисел(0); // Инициализация генератора случайных чисел
	
	N = 1000; // Размер выборки
	Выборка = Новый Массив(N);
    
    // Генерация выборки
    Для i = 0 По N - 1 Цикл
        Выборка[i] = СгенерироватьСлучайноеЧисло();
    КонецЦикла;

    // Проверка гипотезы согласия критерием Колмогорова-Смирнова
    d_статистика = КритерийКолмогороваСмирнова(Выборка);
	критическое_значение = КритическоеЗначение(n);
    
    // Вывод результатов
    Сообщить("Статистика Колмогорова-Смирнова: " + d_статистика);
        Сообщить("Критическое значение для уровня значимости 0.05: " + критическое_значение);
    Если d_статистика < критическое_значение Тогда
        Сообщить("Гипотеза не отвергается (данные соответствуют распределению).");
    Иначе
        Сообщить("Гипотеза отвергается (данные не соответствуют распределению).");
	КонецЕсли;
	
КонецПроцедуры