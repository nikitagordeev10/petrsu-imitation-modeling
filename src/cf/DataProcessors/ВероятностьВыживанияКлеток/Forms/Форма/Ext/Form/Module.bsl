Процедура БыстраяСортировкаПоУбыванию(Массив, ЛевыйИндекс, ПравыйИндекс)
    ТекущийЛевый = ЛевыйИндекс;
    ТекущийПравый = ПравыйИндекс;
    ОпорныйЭлемент = Массив[Цел((ТекущийЛевый + ТекущийПравый) / 2)];
	
    Пока Истина Цикл    
        Пока Массив[ТекущийЛевый] > ОпорныйЭлемент Цикл  
            ТекущийЛевый = ТекущийЛевый + 1;        
        КонецЦикла;
		
        Пока Массив[ТекущийПравый] < ОпорныйЭлемент Цикл  
            ТекущийПравый = ТекущийПравый - 1;        
        КонецЦикла; 
        
        Если ТекущийЛевый <= ТекущийПравый Тогда        
            ВременноеЗначение = Массив[ТекущийЛевый];
            Массив[ТекущийЛевый] = Массив[ТекущийПравый];
            Массив[ТекущийПравый] = ВременноеЗначение;
            ТекущийЛевый = ТекущийЛевый + 1;
            ТекущийПравый = ТекущийПравый - 1;        
        КонецЕсли;
        
        Если ТекущийЛевый > ТекущийПравый Тогда
            Прервать;
        КонецЕсли; 
        
    КонецЦикла;       
	
    Если ЛевыйИндекс < ТекущийПравый Тогда
        БыстраяСортировкаПоУбыванию(Массив, ЛевыйИндекс, ТекущийПравый);
    КонецЕсли;                   
	
    Если ТекущийЛевый < ПравыйИндекс Тогда
        БыстраяСортировкаПоУбыванию(Массив, ТекущийЛевый, ПравыйИндекс);
    КонецЕсли;
    
КонецПроцедуры

Процедура СортироватьПоУбыванию(Массив)
    ЛевыйИндекс = 0;
    ПравыйИндекс = Массив.ВГраница();
    БыстраяСортировкаПоУбыванию(Массив, ЛевыйИндекс, ПравыйИндекс);
КонецПроцедуры



// Функция для генерации экспоненциально распределенной случайной величины
Функция ГенерацияЭкспоненциальной(lambda)
	ГСЧ = Новый ГенераторСлучайныхЧисел();
	u = (ГСЧ.СлучайноеЧисло(0, 1000000) / 1000000.0);
    Возврат -Log(1 - u) / lambda;
КонецФункции

// Основная функция Монте-Карло
Функция МонтеКарло(n, m, k, lambda_mal, lambda_healthy, simulations)
    count = 0;

    Для i = 1 По simulations Цикл
        // Генерация времени жизни злокачественных клеток
        malignant = Новый Массив;
        Для j = 1 По n Цикл
            malignant.Добавить(ГенерацияЭкспоненциальной(lambda_mal));
        КонецЦикла;

        // Генерация времени жизни здоровых клеток
        healthy = Новый Массив;
        Для j = 1 По m Цикл
            healthy.Добавить(ГенерацияЭкспоненциальной(lambda_healthy));
        КонецЦикла;

        // Поиск максимального времени среди злокачественных клеток
        max_malignant = malignant[0];
        Для j = 1 По malignant.Количество() - 1 Цикл
            Если malignant[j] > max_malignant Тогда
                max_malignant = malignant[j];
            КонецЕсли;
        КонецЦикла;

        // Сортировка здоровых клеток по убыванию
        СортироватьПоУбыванию(healthy);

        // Выбор T(k) - k-й по убыванию
        Если k <= healthy.Количество() Тогда
            T_k = healthy[k - 1];
        Иначе
            T_k = 0; // Если k больше m, вероятность нулевая
        КонецЕсли;

        // Проверка условия max_malignant < T(k)
        Если max_malignant < T_k Тогда
            count = count + 1;
        КонецЕсли;
    КонецЦикла;

    Возврат count / simulations;
КонецФункции

&НаКлиенте
Процедура Сгенерировать(Команда)
    n = 5;  // Количество злокачественных клеток
	m = 10; // Количество здоровых клеток
	k = 3;  // Граничное значение
	lambda_mal = 1.5;  // Параметр лямбда для злокачественных клеток
	lambda_healthy = 1.0; // Параметр лямбда для здоровых клеток
	simulations = 1000; // Число итераций Монте-Карло

	probability = МонтеКарло(n, m, k, lambda_mal, lambda_healthy, simulations);
    Сообщить("Оценка вероятности P(N >= " + k + "): " + Формат(probability, "ЧГ=6"));
КонецПроцедуры
