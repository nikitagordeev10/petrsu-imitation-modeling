// Функция для генерации случайного числа из распределения Пуассона
// Используется алгоритм Кнута для генерации пуассоновских случайных величин
Функция ПолучитьСлучайноеКоличествоФотонов(ПараметрРаспределения)
    // Инициализация счетчика сгенерированных фотонов
    Счетчик = 0;
    
    // Вычисление экспоненты от отрицательного параметра распределения
    // Это вероятность нулевого события в распределении Пуассона
    Экспонента = EXP(-ПараметрРаспределения); // e в степени -λ
    
    // Инициализация произведения вероятностей
    ПроизведениеВероятностей = 1.0;
    
    // Алгоритм генерации: умножаем случайные числа пока произведение больше экспоненты
    Пока ПроизведениеВероятностей > Экспонента Цикл
        Счетчик = Счетчик + 1;
        // Генерируем новое случайное число и умножаем на текущее произведение
        ПроизведениеВероятностей = ПроизведениеВероятностей * Математика.СлучайноеЧислоОт0До1();
    КонецЦикла;
    
    // Возвращаем количество событий (для фотонов будем использовать N+1)
    Возврат Счетчик;
КонецФункции

// Функция для вычисления вероятности срабатывания схемы
Процедура ВыполнитьСимуляцию(ТолщинаСлоя, КоличествоСимуляций)
    СкоростьСвета = 300000000; // Скорость света в вакууме (м/с)
    ВременнойИнтервал = 0.000000030; // Временное окно совпадений (30 наносекунд)
	
    ПараметрПуассона = 2.0; // Параметр распределения Пуассона, среднее количество фотонов в одном событии
    СчетчикСрабатываний = 0; // Счетчик успешных срабатываний схемы совпадений
	
	// Основной цикл Монте-Карло
    Для НомерСимуляции = 1 По КоличествоСимуляций Цикл
        // 1. Генерация количества фотонов в событии
        // Используем N+1, так как распределение Пуассона дает N ≥ 0
        КоличествоФотонов = ПолучитьСлучайноеКоличествоФотонов(ПараметрПуассона) + 1;
		
		// Массив для хранения времен прихода фотонов на детекторы
		ВремяПрихода = Новый Массив(КоличествоФотонов);
        
        // 2. Моделирование испускания и движения каждого фотона
        Для НомерФотона = 0 По КоличествоФотонов - 1 Цикл
            // 2.1. Определяем точку испускания фотона в слое
            // Равномерное распределение по толщине слоя
            ПозицияИспускания = Математика.СлучайноеЧислоОт0До1() * ТолщинаСлоя; // От 0 до D
            
            // 2.2. Моделируем направление движения фотона
            // ACOS(1-2*U) дает равномерное распределение по телесному углу
            УголИспускания = ACOS(1 - 2 * Математика.СлучайноеЧислоОт0До1()); // Это дает равномерное распределение направлений  
            
            // 2.3. Вычисляем время прихода фотона на детектор
            // Для фотона, летящего вправо (cosθ > 0) - попадет в правый детектор
            // Для фотона, летящего влево (cosθ < 0) - попадет в левый детектор
			// Время = расстояние / (скорость света * проекция направления)
            ВремяПрихода[НомерФотона] = ПозицияИспускания / (СкоростьСвета * Cos(УголИспускания));
        КонецЦикла;
        
        // 3. Проверка условия совпадения
        // Ищем хотя бы одну пару фотонов, пришедших в пределах временного окна
        НайденоСовпадение = Ложь;
		
		Математика.СортироватьМассивПоВозрастанию(ВремяПрихода);
		
		// Перебираем все возможные пары фотонов
		Для ПервыйФотон = 0 По КоличествоФотонов - 2 Цикл
            Для ВторойФотон = ПервыйФотон + 1 По КоличествоФотонов - 1 Цикл
				// Вычисляем разницу времен прихода для пары фотонов
				РазницаВремен = Математика.Модуль(ВремяПрихода[ПервыйФотон] - ВремяПрихода[ВторойФотон]);
                // Проверяем попадание в окно совпадений
                Если РазницаВремен <= ВременнойИнтервал Тогда
                    НайденоСовпадение = Истина;
                    Прервать;
                КонецЕсли;
			КонецЦикла;
			
			// Выходим из внешнего цикла если найдено совпадение
            Если НайденоСовпадение Тогда
                Прервать;
            КонецЕсли;
		КонецЦикла;                                             
		
        // Увеличиваем счетчик если было хотя бы одно совпадение
        Если НайденоСовпадение Тогда
            СчетчикСрабатываний = СчетчикСрабатываний + 1;
        КонецЕсли;
    КонецЦикла;
	
	// 4. Расчет итоговой вероятности срабатывания
    ВероятностьСрабатывания = СчетчикСрабатываний / КоличествоСимуляций;
    Сообщить("Вероятность срабатывания схемы: " + ВероятностьСрабатывания);
    Сообщить("Количество срабатываний: " + СчетчикСрабатываний + " из " + КоличествоСимуляций + " испытаний");
	
КонецПроцедуры      

// ================================= Команды формы =================================

&НаКлиенте
Процедура ВычислитьВероятностьСрабатывания(Команда)
    // Параметры модели
    ТолщинаСлоя = 1.0; // Толщина слоя вакуума (м)
    КоличествоСимуляций = 10000; // Точность Монте-Карло
    
    ВыполнитьСимуляцию(ТолщинаСлоя, КоличествоСимуляций);
КонецПроцедуры