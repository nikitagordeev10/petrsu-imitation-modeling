// ============================= Сортировки массива ============================= 
 
Процедура БыстраяСортировкаПоВозрастанию(Массив, ЛевыйИндекс, ПравыйИндекс)
    ТекущийЛевый = ЛевыйИндекс;
    ТекущийПравый = ПравыйИндекс;
    ОпорныйЭлемент = Массив[Цел((ТекущийЛевый + ТекущийПравый) / 2)];
	
    Пока Истина Цикл    
        Пока Массив[ТекущийЛевый] < ОпорныйЭлемент Цикл        
            ТекущийЛевый = ТекущийЛевый + 1;        
        КонецЦикла;
		
        Пока Массив[ТекущийПравый] > ОпорныйЭлемент Цикл        
            ТекущийПравый = ТекущийПравый - 1;        
        КонецЦикла; 
        
        Если ТекущийЛевый <= ТекущийПравый Тогда        
            ВременноеЗначение = Массив[ТекущийЛевый];
            Массив[ТекущийЛевый] = Массив[ТекущийПравый];
            Массив[ТекущийПравый] = ВременноеЗначение;
            ТекущийЛевый = ТекущийЛевый + 1;
            ТекущийПравый = ТекущийПравый - 1;        
        КонецЕсли;
        
        Если ТекущийЛевый > ТекущийПравый Тогда
            Прервать;
        КонецЕсли; 
        
    КонецЦикла;       
	
    Если ЛевыйИндекс < ТекущийПравый Тогда
        БыстраяСортировкаПоВозрастанию(Массив, ЛевыйИндекс, ТекущийПравый);
    КонецЕсли;                   
	
    Если ТекущийЛевый < ПравыйИндекс Тогда
        БыстраяСортировкаПоВозрастанию(Массив, ТекущийЛевый, ПравыйИндекс);
    КонецЕсли;
    
КонецПроцедуры

Процедура БыстраяСортировкаПоУбыванию(Массив, ЛевыйИндекс, ПравыйИндекс)
    ТекущийЛевый = ЛевыйИндекс;
    ТекущийПравый = ПравыйИндекс;
    ОпорныйЭлемент = Массив[Цел((ТекущийЛевый + ТекущийПравый) / 2)];
	
    Пока Истина Цикл    
        Пока Массив[ТекущийЛевый] > ОпорныйЭлемент Цикл  
            ТекущийЛевый = ТекущийЛевый + 1;        
        КонецЦикла;
		
        Пока Массив[ТекущийПравый] < ОпорныйЭлемент Цикл  
            ТекущийПравый = ТекущийПравый - 1;        
        КонецЦикла; 
        
        Если ТекущийЛевый <= ТекущийПравый Тогда        
            ВременноеЗначение = Массив[ТекущийЛевый];
            Массив[ТекущийЛевый] = Массив[ТекущийПравый];
            Массив[ТекущийПравый] = ВременноеЗначение;
            ТекущийЛевый = ТекущийЛевый + 1;
            ТекущийПравый = ТекущийПравый - 1;        
        КонецЕсли;
        
        Если ТекущийЛевый > ТекущийПравый Тогда
            Прервать;
        КонецЕсли; 
        
    КонецЦикла;       
	
    Если ЛевыйИндекс < ТекущийПравый Тогда
        БыстраяСортировкаПоУбыванию(Массив, ЛевыйИндекс, ТекущийПравый);
    КонецЕсли;                   
	
    Если ТекущийЛевый < ПравыйИндекс Тогда
        БыстраяСортировкаПоУбыванию(Массив, ТекущийЛевый, ПравыйИндекс);
    КонецЕсли;
    
КонецПроцедуры

Процедура СортироватьМассивПоУбыванию(Массив) Экспорт
    ЛевыйИндекс = 0;
    ПравыйИндекс = Массив.ВГраница();
    БыстраяСортировкаПоУбыванию(Массив, ЛевыйИндекс, ПравыйИндекс);
КонецПроцедуры

Процедура СортироватьМассивПоВозрастанию(Массив) Экспорт
    ЛевыйИндекс = 0;
    ПравыйИндекс = Массив.ВГраница();
    БыстраяСортировкаПоВозрастанию(Массив, ЛевыйИндекс, ПравыйИндекс);
КонецПроцедуры

// ============================= Математические константы ============================= 

Функция Пи() Экспорт
    Возврат 3.1415926535897932384626433832795;
КонецФункции

// ============================= Обработка чисел ============================= 

Функция Модуль(Аргумент) Экспорт
    Возврат ?(Аргумент >= 0, Аргумент, -Аргумент);
КонецФункции 

Функция КвадратныйКорень(Аргумент) Экспорт 
	Возврат sqrt(Аргумент);
КонецФункции

// ============================= Генерация чисел ============================= 

Функция СлучайноеЧислоОт0До1() Экспорт
	ГСЧ = Новый ГенераторСлучайныхЧисел();
	Возврат ГСЧ.СлучайноеЧисло(0, 100000000) / 100000000.0;
КонецФункции
